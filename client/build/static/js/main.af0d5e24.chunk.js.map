{"version":3,"sources":["Util/responseUtil.js","Pages/Movies.js","Pages/Movie.js","Pages/MovieInput.js","App.js","serviceWorker.js","index.js"],"names":["handleResponse","setter","response","statusText","data","console","log","QuickSetupButton","show","setup","Button","onClick","Movies","useState","movies","setMovies","axios","then","Table","striped","bordered","hover","variant","map","movie","key","id","to","title","releaseDate","plot","length","Centered","styled","div","Movie","setMovie","match","useRouteMatch","params","Container","src","poster","genre","MovieInput","setTitle","setPlot","setGenre","setReleaseDate","setPoster","history","useHistory","InputGroup","Prepend","Text","FormControl","value","onChange","event","target","status","push","App","Navbar","bg","Brand","Nav","className","Link","href","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af0d5e24.chunk.js","sourcesContent":["const handleResponse = (setter) => {\r\n\treturn (response) => {\r\n\t\tif (response.statusText === \"OK\") {\r\n\t\t\tsetter(response.data)\r\n\t\t\tconsole.log(response.data);\r\n\t\t} else {\r\n\t\t\t//TODO handle error\r\n\t\t}\r\n\t}\r\n};\r\nexport default handleResponse;","import React, {useState} from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport handleResponse from \"../Util/responseUtil\";\r\nimport * as axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nconst Movies = () => {\r\n\tconst quickSetup = () => {\r\n\t\taxios.get('/api/movies/setup').then(handleResponse(setMovies));\r\n\t};\r\n\tconst [movies, setMovies] = useState(null);\r\n\tif (!movies) {\r\n\t\taxios.get('/api/movies').then(handleResponse(setMovies))\r\n\t}\r\n\treturn (\r\n\t\t\t<span>\r\n\r\n\t\t\t\t<Table striped bordered hover variant=\"dark\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Title</th>\r\n\t\t\t\t\t\t\t<th>Release Date</th>\r\n\t\t\t\t\t\t\t<th>Plot</th>\r\n\t\t\t\t\t\t\t<th>Average Rating</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t{movies && movies.map(movie=> (\r\n\t\t\t\t\t\t<tr key={movie.id}>\r\n\t\t\t\t\t\t\t<td><Link to={`/movie/${movie.id}`}>{movie.title}</Link></td>\r\n\t\t\t\t\t\t\t<td>{movie.releaseDate}</td>\r\n\t\t\t\t\t\t\t<td>{movie.plot}</td>\r\n\t\t\t\t\t\t\t<td>Unknown Rating</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t\t<QuickSetupButton show = {movies === null || movies.length === 0} setup={quickSetup}/>\r\n\t\t\t</span>\r\n\t);\r\n};\r\n\r\nconst QuickSetupButton = ({show, setup}) => {\r\n\tif (show) {\r\n\t\treturn <Button onClick={() => setup()}>Quick Setup</Button>\r\n\t} else {\r\n\t\treturn '';\r\n\t}\r\n};\r\n\r\nexport default Movies\r\n","import React, {useState} from \"react\";\r\nimport {Card, Container, Jumbotron} from \"react-bootstrap\";\r\nimport {\r\n\tuseRouteMatch\r\n} from \"react-router-dom\";\r\nimport * as axios from \"axios\";\r\nimport handleResponse from \"../Util/responseUtil\";\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Centered = styled.div`\r\n  margin-left:auto;\r\n  margin-right:auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst Movie = () => {\r\n\tconst [movie, setMovie] = useState(null);\r\n\tlet match = useRouteMatch(\"/movie/:id\");\r\n\tif (!movie) {\r\n\t\taxios.get(`/api/movies/movie/${match.params.id}`).then(handleResponse(setMovie));\r\n\t}\r\n\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t{\r\n\t\t\t\t\tmovie ? (\r\n\t\t\t\t\t<Centered>\r\n\t\t\t\t\t\t\t<h1>{movie.title}</h1>\r\n\t\t\t\t\t\t\t<div><img src={movie.poster}/></div>\r\n\t\t\t\t\t\t\t<p>Released {movie.releaseDate} - {movie.genre}</p>\r\n\t\t\t\t\t\t\t<p>{movie.plot}</p>\r\n\t\t\t\t\t</Centered>\r\n\t\t\t\t) : ''\r\n\t\t\t\t}\r\n\t\t\t</Container>\r\n\t)\r\n};\r\n export default Movie;","import React, {useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\"\r\nimport * as axios from \"axios\";\r\nimport {Button, Container, FormControl, InputGroup} from \"react-bootstrap\";\r\n\r\nconst MovieInput = () => {\r\n\tconst [title, setTitle] = useState('');\r\n\tconst [plot, setPlot] = useState('');\r\n\tconst [genre, setGenre] = useState('');\r\n\tconst [releaseDate, setReleaseDate] = useState('');\r\n\tconst [poster, setPoster] = useState('');\r\n\tconst history = useHistory();\r\n\r\n\tconst saveMovie = () => {\r\n\t\taxios.post('/api/movies', {title, plot, genre, releaseDate, poster}).then(response => {\r\n\t\t\tif (response.status === 201) {\r\n\t\t\t\thistory.push('/');\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<InputGroup.Prepend>\r\n\t\t\t\t\t<InputGroup.Text>Title</InputGroup.Text>\r\n\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t<FormControl value={title} onChange = {event=>setTitle(event.target.value)}/>\r\n\t\t\t</InputGroup>\r\n\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<InputGroup.Prepend>\r\n\t\t\t\t\t<InputGroup.Text>Genre</InputGroup.Text>\r\n\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t<FormControl value={genre} onChange = {event=>setGenre(event.target.value)}/>\r\n\t\t\t</InputGroup>\r\n\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<InputGroup.Prepend>\r\n\t\t\t\t\t<InputGroup.Text>Release Date</InputGroup.Text>\r\n\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t<FormControl value={releaseDate} onChange = {event=>setReleaseDate(event.target.value)}/>\r\n\t\t\t</InputGroup>\r\n\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<InputGroup.Prepend>\r\n\t\t\t\t\t<InputGroup.Text>Poster Url</InputGroup.Text>\r\n\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t<FormControl value={poster} onChange = {event=>setPoster(event.target.value)}/>\r\n\t\t\t</InputGroup>\r\n\r\n\t\t\t<InputGroup>\r\n\t\t\t\t<InputGroup.Prepend>\r\n\t\t\t\t\t<InputGroup.Text>Plot</InputGroup.Text>\r\n\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t<FormControl value={plot} onChange = {event=>setPlot(event.target.value)}/>\r\n\t\t\t</InputGroup>\r\n\t\t\t<Button onClick={()=>saveMovie()}>Save Movie</Button>\r\n\t\t</Container>\r\n\t)\r\n};\r\n\r\nexport default MovieInput;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Movies from \"./Pages/Movies\";\nimport Movie from \"./Pages/Movie\";\nimport MovieInput from \"./Pages/MovieInput\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar bg=\"light\">\n        <Navbar.Brand>Bragtown Movies</Navbar.Brand>\n\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Movies</Nav.Link>\n          <Nav.Link href=\"/new\">Add Movie</Nav.Link>\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Movies/>\n        </Route>\n        <Route path=\"/new\" exact>\n          <MovieInput/>\n        </Route>\n        <Route path=\"/movie/:id\">\n          <Movie/>\n        </Route>\n\n\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}